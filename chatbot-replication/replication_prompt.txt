## Gemini Chatbot Replication Prompt

This document provides a detailed prompt to replicate the Gemini Chatbot project. Follow these instructions carefully to ensure accurate replication.

**1. Project Overview:**

The Gemini Chatbot is a web application that allows users to interact with the Gemini language model via a chat interface. It features a modern UI, Markdown support, a light/dark theme toggle, and displays ellipses while the response is being fetched.

**2. API Key:**

*   API Key: GEMINI_API_KEY
*   Model: gemini-2.5-flash

**Important:** This API key is provided for replication purposes only. Do not use it for production environments. Replace it with your own API key.

**3. File Structure:**

The project consists of two main files:

*   `index.html`: Contains the HTML structure, CSS links, JavaScript code, and all UI elements.
*   `style.css`: Contains the CSS styles for the application's appearance.

**4. index.html Content:**

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gemini Chatbot</title>
    <link rel="stylesheet" href="style.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" integrity="sha512-9usAa10IRO0HhonpyAIVpjrylPvoDwiPUiKdWk5t3PyolY1cOd4DSE0Ga+ri4AuTroPR5aQvXU9xC6qOPnzFeg==" crossorigin="anonymous" referrerpolicy="no-referrer" />
</head>
<body>
    <div class="container">
        <header>
            <h1>Gemini Chatbot</h1>
        </header>
        <main>
            <div id="chatbox"></div>
        </main>
        <footer>
            <div class="input-area">
                <input type="text" id="inputbox" placeholder="Type your message...">
                <button id="sendButton"><i class="fas fa-paper-plane"></i></button>
            </div>
        </footer>
        <div class="theme-toggle">
            <i class="fas fa-sun" id="theme-icon"></i>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/showdown/2.1.0/showdown.min.js"></script>
    <script>
        const apiKey = 'GEMINI_API_KEY';
        const chatbox = document.getElementById('chatbox');
        const inputbox = document.getElementById('inputbox');
        const sendButton = document.getElementById('sendButton');
        const showdownConverter = new showdown.Converter();
        let messageIdCounter = 0;

        const themeToggle = document.querySelector('.theme-toggle');
        const themeIcon = document.getElementById('theme-icon');
        let isDarkMode = false;

        themeToggle.addEventListener('click', () => {
            isDarkMode = !isDarkMode;
            document.body.classList.toggle('dark-mode');

            if (isDarkMode) {
                themeIcon.classList.remove('fa-sun');
                themeIcon.classList.add('fa-moon');
            } else {
                themeIcon.classList.remove('fa-moon');
                themeIcon.classList.add('fa-sun');
            }
        });

        async function sendMessage() {
            const message = inputbox.value.trim();
            if (!message) return;

            appendMessage('User', message);
            inputbox.value = '';

            try {
                const response = await fetch('https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key=' + apiKey, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        contents: [{
                            parts: [{
                                text: message
                            }],
                            role: 'user'
                        }],
                        generationConfig: {
                            temperature: 0.7,
                            topP: 0.95,
                            topK: 40
                        },
                        safetySettings: [
                            {
                                category: "HARM_CATEGORY_HARASSMENT",
                                threshold: "BLOCK_MEDIUM_AND_ABOVE"
                            },
                            {
                                category: "HARM_CATEGORY_HATE_SPEECH",
                                threshold: "BLOCK_MEDIUM_AND_ABOVE"
                            },
                            {
                                category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                                threshold: "BLOCK_MEDIUM_AND_ABOVE"
                            },
                            {
                                category: "HARM_CATEGORY_DANGEROUS_CONTENT",
                                threshold: "BLOCK_MEDIUM_AND_ABOVE"
                            }
                        ]
                    })
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const data = await response.json();
                let reply = 'No response from bot.';

                if (data && data.candidates && data.candidates[0] && data.candidates[0].content && data.candidates[0].content.parts && data.candidates[0].content.parts[0] && data.candidates[0].content.parts[0].text) {
                    reply = data.candidates[0].content.parts[0].text;
                } else {
                    console.warn('Unexpected response format:', data);
                    reply = 'Sorry, I could not process your request.';
                }

                 const botMessageId = appendMessage('Bot', '...'); // Show ellipses initially

                // Simulate typing effect (optional)
                let dots = '';
                const intervalId = setInterval(() => {
                    dots = dots.length < 3 ? dots + '.' : '';
                    document.getElementById(botMessageId).querySelector('.text').textContent = dots;
                }, 500);

                setTimeout(()=>{
                    clearInterval(intervalId);
                    const messageDiv = document.getElementById(botMessageId);
                    if (messageDiv) {
                        messageDiv.querySelector('.text').innerHTML = showdownConverter.makeHtml(reply);
                    }
                }, 1000)


            } catch (error) {
                console.error('Error:', error);
                appendMessage('Error', 'Failed to get response. Please check console.');
            }
        }

        function appendMessage(sender, message, existingMessageId = null) {
            const messageDiv = document.createElement('div');
            messageDiv.classList.add('message', sender.toLowerCase());

            const senderSpan = document.createElement('span');
            senderSpan.classList.add('sender');
            senderSpan.textContent = sender + ': ';

            const textDiv = document.createElement('div');
            textDiv.classList.add('text');
            textDiv.innerHTML = message;

            messageDiv.appendChild(senderSpan);
            messageDiv.appendChild(textDiv);

            if (existingMessageId) {
                messageDiv.id = existingMessageId;
            } else {
                messageIdCounter++;
                messageDiv.id = `message-${messageIdCounter}`;
            }

            chatbox.appendChild(messageDiv);
            chatbox.scrollTop = chatbox.scrollHeight;

            return messageDiv.id; // Return the message ID
        }

        sendButton.addEventListener('click', sendMessage);
        inputbox.addEventListener('keydown', function(event) {
            if (event.key === 'Enter') {
                sendMessage();
            }
        });
    </script>
</body>
</html>
```

**5. style.css Content:**

```css
body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background: linear-gradient(to right, #6a82fb, #fc5c7d);
    margin: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    overflow: hidden;
    color: white;
}

.container {
    background: rgba(255, 255, 255, 0.1);
    border-radius: 16px;
    box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
    backdrop-filter: blur(7.7px);
    -webkit-backdrop-filter: blur(7.7px);
    border: 1px solid rgba(255, 255, 255, 0.3);
    padding: 20px;
    width: 600px;
    max-width: 90%;
    display: flex;
    flex-direction: column;
    height: 90vh;
}

header {
    text-align: center;
    margin-bottom: 20px;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
}

header h1 {
    font-size: 2em;
}

main {
    flex-grow: 1;
    overflow-y: auto;
    padding: 10px;
}

#chatbox {
    display: flex;
    flex-direction: column;
    gap: 10px;
    padding: 10px;
}

.message {
    padding: 10px;
    border-radius: 8px;
    word-wrap: break-word;
    max-width: 80%;
}

.message.user {
    background-color: rgba(135, 206, 250, 0.15);
    align-self: flex-end;
}

.message.bot {
    background-color: rgba(144, 238, 144, 0.15);
    align-self: flex-start;
    color: white;
}

.message.error {
    background-color: rgba(255, 0, 0, 0.2);
    color: white;
}

.sender {
    font-weight: bold;
    margin-right: 5px;
}

.text {
    line-height: 1.4;
}

footer {
    padding: 10px;
}

.input-area {
    display: flex;
    align-items: center;
    gap: 10px;
}

.input-area input {
    flex-grow: 1;
    padding: 12px;
    border: none;
    border-radius: 12px;
    background: rgba(255, 255, 255, 0.3);
    color: white;
    box-shadow: inset 0 2px 5px rgba(0, 0, 0, 0.1);
    font-size: 16px;
}

.input-area input::placeholder {
    color: rgba(255, 255, 255, 0.7);
}

.input-area button {
    background: linear-gradient(to right, #4facfe, #00f2fe);
    color: white;
    padding: 12px 20px;
    border: none;
    border-radius: 12px;
    cursor: pointer;
    font-size: 16px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
    transition: background 0.3s ease;
}

.input-area button:hover {
    background: linear-gradient(to right, #00f2fe, #4facfe);
}

/* Scrollbar styling */
#chatbox::-webkit-scrollbar {
    width: 8px;
}

#chatbox::-webkit-scrollbar-track {
    background: rgba(0, 0, 0, 0.1);
    border-radius: 4px;
}

#chatbox::-webkit-scrollbar-thumb {
    background: rgba(255, 255, 255, 0.4);
    border-radius: 4px;
}

#chatbox::-webkit-scrollbar-thumb:hover {
    background: rgba(255, 255, 255, 0.6);
}

body.dark-mode {
    background: linear-gradient(to right, #222, #333);
    color: #eee;
}

body.dark-mode .container {
    background: rgba(0, 0, 0, 0.5);
    border: 1px solid rgba(0, 0, 0, 0.8);
}

body.dark-mode #chatbox {
    background: rgba(0, 0, 0, 0.3);
    color: #ddd;
}

body.dark-mode .input-area input {
    background: rgba(0, 0, 0, 0.4);
    color: #ddd;
}

body.dark-mode .input-area input::placeholder {
    color: rgba(200, 200, 200, 0.7);
}

.theme-toggle {
    position: absolute;
    top: 20px;
    right: 20px;
    font-size: 24px;
    cursor: pointer;
    color: white;
    z-index: 10;
}

body {
    transition: background 0.3s ease, color 0.3s ease;
}
```

**6. JavaScript Libraries:**

The project uses the following JavaScript libraries:

*   **showdown.js:** For Markdown to HTML conversion. Include via CDN: `<script src="https://cdnjs.cloudflare.com/ajax/libs/showdown/2.1.0/showdown.min.js"></script>`
*   **Font Awesome:** For icons. Include via CDN: `<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" integrity="sha512-9usAa10IRO0HhonpyAIVpjrylPvoDwiPUiKdWk5t3PyolY1cOd4DSE0Ga+ri4AuTroPR5aQvXU9xC6qOPnzFeg==" crossorigin="anonymous" referrerpolicy="no-referrer" />`

**7. Functionality:**

*   **sendMessage():** Sends the user's message to the Gemini API, retrieves the response, and displays it in the chatbox.
*   **appendMessage(sender, message, existingMessageId):** Appends a message to the chatbox with the specified sender (User, Bot, or Error). Supports updating existing messages (for the ellipses).
*   **Theme Toggle:** Allows users to switch between light and dark themes.
*   **Ellipses While Loading:** Displays "..." while waiting for the API response.

**8. API Interaction:**

*   **Endpoint:** `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key=[YOUR_API_KEY]`
*   **Method:** POST
*   **Headers:** `Content-Type: application/json`
*   **Body:**

```json
{
    "contents": [{
        "parts": [{
            "text": message
        }],
        "role": "user"
    }],
    "generationConfig": {
        "temperature": 0.7,
        "topP": 0.95,
        "topK": 40
    },
    "safetySettings": [{
            "category": "HARM_CATEGORY_HARASSMENT",
            "threshold": "BLOCK_MEDIUM_AND_ABOVE"
        },
        {
            "category": "HARM_CATEGORY_HATE_SPEECH",
            "threshold": "BLOCK_MEDIUM_AND_ABOVE"
        },
        {
            "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
            "threshold": "BLOCK_MEDIUM_AND_ABOVE"
        },
        {
            "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
            "threshold": "BLOCK_MEDIUM_AND_ABOVE"
        }
    ]
}
```

**9. CSS Styling:**

*   The `style.css` file provides the visual styling for the chatbot. Ensure that you copy the content accurately to replicate the intended appearance.
*   Pay attention to the dark mode styles, which are toggled by adding the `dark-mode` class to the `body` element.

**10. Error Handling:**

The JavaScript code includes basic error handling to catch API request failures and display an error message in the chatbox.

**11. Important Considerations:**

*   Replace the placeholder API key with your own valid API key.
*   Ensure that you have a stable internet connection for the chatbot to function correctly.
*   Test the chatbot thoroughly after replication to verify that all features are working as expected.

By following these instructions, you should be able to successfully replicate the Gemini Chatbot project.